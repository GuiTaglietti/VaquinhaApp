services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: vaquinhas_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    ports:
      - "55432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vaquinhas_db"]
      interval: 5s
      timeout: 5s
      retries: 20
    secrets:
      - db_password

  backend:
    build: ./backend
    env_file:
      - ./backend/.env
    ports:
      - "5055:5000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend/app:/app/app
      - uploads_data:/app/uploads
    environment:
      FLASK_ENV: development
      UPLOAD_DIR: /app/uploads
      UPLOAD_PUBLIC_BASE: /files
      DATABASE_HOST: db
      DATABASE_USER: postgres
      DATABASE_NAME: vaquinhas_db
      PIX_BASE_URL: http://pix-module:8000
      PIX_API_KEY: ${PIX_API_KEY}
      PIX_WEBHOOK_SECRET: ${PIX_WEBHOOK_SECRET}
    secrets:
      - db_password
    command: |
      sh -lc '
        set -e
        PASS="$(tr -d "\r\n" < /run/secrets/db_password)"
        export POSTGRES_HOST="db"
        export POSTGRES_PORT="5432"
        export POSTGRES_USER="postgres"
        export POSTGRES_DB="vaquinhas_db"
        export POSTGRES_PASSWORD="$PASS"
        export DATABASE_PASSWORD="$PASS"
        export PGPASSWORD="$PASS"
        export DB_PASSWORD_FILE="/run/secrets/db_password"
        exec /app/entrypoint.sh
      '
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5000/api/healthz || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 10s

  frontend:
    image: node:20
    working_dir: /app
    env_file:
      - ./frontend/.env
    environment:
      - CHOKIDAR_USEPOLLING=1
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5199:8080"
    depends_on:
      - backend
    command: >
      sh -lc "
        corepack enable || true &&
        npm ci &&
        npm run dev
      "

  admin-backend:
    build: ../admin-panel/admin-backend
    env_file:
      - ../admin-panel/admin-backend/.env
    ports:
      - "6090:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_HOST: db
      DATABASE_USER: postgres
      DATABASE_NAME: vaquinhas_db
      DB_PASSWORD_FILE: /run/secrets/db_password
      NOTIFICATIONS_DB_PATH: /app/data/admin_notifications.db
      NOTIFICATIONS_RETENTION_DAYS: 180
      STORAGE_DIR: /app/storage
    volumes:
      - admin_notifications_data:/app/data
      - admin_storage:/app/storage
    secrets:
      - db_password
    command: >
      sh -lc "gunicorn app:app
      -w 1
      -k gthread
      --threads 8
      --timeout 0
      -b 0.0.0.0:8000"

  admin-frontend:
    build:
      context: ../admin-panel/admin-frontend
      args:
        VITE_ADMIN_API_URL: ${VITE_ADMIN_API_URL}
        VITE_MAINTENANCE_FEE_PCT: ${VITE_MAINTENANCE_FEE_PCT}
        VITE_APP_FRONTEND_URL: ${VITE_APP_FRONTEND_URL}
    environment:
      ADMIN_API_KEY: ${ADMIN_API_KEY}
      ADMIN_BACKEND_URL: http://admin-backend:8000
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
    ports:
      - "6091:80"
    depends_on:
      - admin-backend

  db-init-pix:
    image: postgres:15
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db_password
      - pix_db_password
    command: |
      sh -lc '
        set -e
        # Lê secrets e remove CR/LF
        PGPASSWORD="$(tr -d "\r\n" < /run/secrets/db_password)"
        PIXPASS="$(tr -d "\r\n" < /run/secrets/pix_db_password)"
        export PGPASSWORD

        cat > /tmp/init_pix.sql <<'SQL'
      \set ON_ERROR_STOP on

      -- role pix_user
      SELECT 1 AS role_exists FROM pg_roles WHERE rolname = '\''pix_user'\'';
      \gset
      \if :{?role_exists}
        \echo role pix_user já existe
      \else
        CREATE USER pix_user WITH PASSWORD :'pixpass';
      \endif

      -- database pix_db
      SELECT 1 AS db_exists FROM pg_database WHERE datname = '\''pix_db'\'';
      \gset
      \if :{?db_exists}
        \echo database pix_db já existe
      \else
        CREATE DATABASE pix_db OWNER pix_user;
      \endif

      GRANT ALL PRIVILEGES ON DATABASE pix_db TO pix_user;
      SQL 

      psql -h db -U postgres -d postgres -v ON_ERROR_STOP=1 -v pixpass="$PIXPASS" -f /tmp/init_pix.sql
      '
    restart: "no"

  pix-module:
    build:
      context: ../PIX-Module
      dockerfile: Dockerfile
    working_dir: /app
    env_file:
      - ../PIX-Module/.env
    environment:
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"
      API_KEY: ${PIX_API_KEY}
      BACKEND_WEBHOOK_URL: http://backend:5000/api/payments/pix/webhook
      BACKEND_WEBHOOK_SECRET: ${PIX_WEBHOOK_SECRET}
    volumes:
      - ../PIX-Module/certs:/certs:ro
      - pix_data:/app/data
    ports:
      - "7010:8000"
    depends_on:
      db:
        condition: service_healthy
      db-init-pix:
        condition: service_completed_successfully
    restart: unless-stopped


volumes:
  db_data:
  uploads_data:
  admin_notifications_data:
  admin_storage:
  pix_data:

secrets:
  db_password:
    file: ./secrets/db_password.txt
  pix_db_password:
    file: ./secrets/pix_db_password.txt
